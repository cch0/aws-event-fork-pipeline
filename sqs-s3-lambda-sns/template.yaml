AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for processing message arriving on the SQS queue. Message is stored
  in a S3 bucket and sent to SNS topic both via Lambda function. Recipient is notified
  by subscribing to the Topic.

Parameters:
  MessageStorageNameSuffix:
    Type: String
    Default: xxx
  MessageNotificationNameSuffix:
    Type: String
    Default: xxx
  MessageQueueArn:
    Type: String
    # Default: arn:aws:sqs:us-west-2:895291970650:sqs01
  MessageStorageNamePrefix:
    Type: String
    Default: raw/
  NotificationEmail:
    Type: String
    # Default: cchdroid@gmail.com

Globals:
  Function:
    Timeout: 10

Resources:
  ## Message Storage S3 bucket
  MessageStorageS3bucket:
    Type: AWS::S3::Bucket
    DependsOn: S3InvokeLambdaPermission
    Properties:
      BucketName: !Join 
        - '-'
        - - message-storage
          - !Ref 'AWS::Region'
          - !Ref MessageStorageNameSuffix
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref MessageStorageNamePrefix
            Function: !GetAtt MessageNotificationFunction.Arn

  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MessageNotificationFunction
      Principal: s3.amazonaws.com
      SourceArn: !Join 
        - ':'
        - - 'arn:aws:s3::'
          - !Join 
            - '-'
            - - message-storage
              - !Ref 'AWS::Region'
              - !Ref MessageStorageNameSuffix

  ## IAM role for Message Storage Lambda
  MessageStorageFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join 
        - '-'
        - - 'message-storage'
          - !Ref 'AWS::Region'
          - !Ref MessageStorageNameSuffix
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: cloudwatch-log-group-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                Resource: !Join 
                  - ':'
                  - - 'arn:aws:logs'
                    - !Ref 'AWS::Region'
                    - !Ref 'AWS::AccountId'
                    - 'log-group:/aws/lambda/*'
                    - '*'
        - PolicyName: cloudwatch-log-stream-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Join 
                  - ':'
                  - - 'arn:aws:logs'
                    - !Ref 'AWS::Region'
                    - !Ref 'AWS::AccountId'
                    - 'log-group:/aws/lambda/*'
                    - '*'
        - PolicyName: sqs-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'sqs:DeleteMessage'
                  - 'sqs:ReceiveMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !Ref MessageQueueArn
        - PolicyName: s3-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 's3:PutObject'
                Resource: !Join
                  - ':'
                  - - 'arn:aws:s3::'
                    - !Join
                      - '/'
                      - - !Join 
                          - '-'
                          - - message-storage
                            - !Ref 'AWS::Region'
                            - !Ref MessageStorageNameSuffix
                        - '*'

  ## Message Storage Lambda                    
  MessageStorageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join 
        - '-'
        - - 'message-storage'
          - !Ref 'AWS::Region'
          - !Ref MessageStorageNameSuffix
      CodeUri: storage/
      Handler: app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt MessageStorageFunctionRole.Arn
      Environment:
        Variables:
          bucketName: !Join 
            - '-'
            - - message-storage
              - !Ref 'AWS::Region'
              - !Ref MessageStorageNameSuffix
          prefix: !Ref MessageStorageNamePrefix

  ## Event Source Mapping: SQS -> Lambda    
  MessageStorageFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      EventSourceArn: !Ref MessageQueueArn
      FunctionName: !Ref MessageStorageFunction


  ## IAM Role for Message Notification Lambda
  MessageNotificationFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join 
        - '-'
        - - 'message-notification'
          - !Ref 'AWS::Region'
          - !Ref MessageNotificationNameSuffix
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: cloudwatch-log-group-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                Resource: !Join 
                  - ':'
                  - - 'arn:aws:logs'
                    - !Ref 'AWS::Region'
                    - !Ref 'AWS::AccountId'
                    - 'log-group:/aws/lambda/*'
                    - '*'
        - PolicyName: cloudwatch-log-stream-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Join 
                  - ':'
                  - - 'arn:aws:logs'
                    - !Ref 'AWS::Region'
                    - !Ref 'AWS::AccountId'
                    - 'log-group:/aws/lambda/*'
                    - '*'
        - PolicyName: sns-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'sns:Publish'
                Resource: !Ref MessageNotificationSNSTopic
        - PolicyName: s3-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 's3:GetObject'
                Resource: !Join
                  - ':'
                  - - 'arn:aws:s3::'
                    - !Join
                      - '/'
                      - - !Join 
                          - '-'
                          - - message-storage
                            - !Ref 'AWS::Region'
                            - !Ref MessageStorageNameSuffix
                        - '*'                


  ## Message Notification Lambda
  MessageNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join 
        - '-'
        - - 'message-notification'
          - !Ref 'AWS::Region'
          - !Ref MessageNotificationNameSuffix
      CodeUri: notification/
      Handler: app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt MessageNotificationFunctionRole.Arn
      Environment:
        Variables:
          bucketName: !Join 
            - '-'
            - - message-storage
              - !Ref 'AWS::Region'
              - !Ref MessageStorageNameSuffix
          topicArn: !Ref MessageNotificationSNSTopic

  ## SNS topic for messsage notification
  MessageNotificationSNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: message-notification
      # Subscription: 
      #   - Subscription
      TopicName: !Join
        - '-'
        - - message-notification
          - !Ref 'AWS::Region'
          - !Ref MessageNotificationNameSuffix


  ## email notification          
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref NotificationEmail
      Protocol: email
      TopicArn: !Ref MessageNotificationSNSTopic

Outputs:
  MessageStorageFunctionName:
    Description: message storage function name
    Value: !Ref MessageStorageFunction

  MessageStorageFunctionARN:
    Description: The ARN of the storage function
    Value: !GetAtt MessageStorageFunction.Arn

  MessageStorageS3BucketName:
    Description: S3 bucket name for message storage
    Value: !Ref MessageStorageS3bucket 

  MessageStorageS3BucketARN:
    Description: The ARN of the message storage S3 bucket
    Value: !GetAtt MessageStorageS3bucket.Arn

  MessageStorageS3BucketName:
    Description: The name of the message storage S3 bucket
    Value: !Ref MessageStorageS3bucket

  MessageNotificationFunctionName:
    Description: message notification function name
    Value: !Ref MessageNotificationFunction

  MessageNotificationFunctionARN:
    Description: The ARN of the notifcation function
    Value: !GetAtt MessageNotificationFunction.Arn

  MessageNotificationSNSTopicArn:
    Description: message notification SNS topic arn
    Value: !Ref MessageNotificationSNSTopic

  MessageNotificationSNSTopicName:
    Description: message notification SNS topic name
    Value: !GetAtt MessageNotificationSNSTopic.TopicName